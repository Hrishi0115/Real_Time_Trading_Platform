SELECT * FROM transactions;
SELECT * FROM orders;
SELECT * FROM trades;
SELECT * FROM portfolios;

-- DO $$ DECLARE fee NUMERIC(10,2);
-- BEGIN
-- select fees -> 'example_fee' INTO fee FROM orders;
-- -- fee := fee + 1;
-- RAISE NOTICE '%', fee;
-- END $$;

SELECT fees from orders where order_id = 3;

SELECT (fees->> 'example_fee')::NUMERIC + 10 as g -- ->> extracts value as text, to cast one thing to a specific DATA_TYPE, do value::DATA_TYPE
FROM orders;

DO $$ DECLARE 
	fee_type TEXT;
	fee_value NUMERIC(10,2);
	BEGIN
	FOR fee_type, fee_value IN
		SELECT key, value::NUMERIC
		FROM orders, jsonb_each(fees)
		WHERE order_id = 3
	LOOP
		RAISE NOTICE 'Type: %, Value: %', fee_type, fee_value;
	END LOOP;
END $$;

DROP FUNCTION test;
CREATE OR REPLACE FUNCTION test(fees JSONB)
	RETURNS VOID
	AS $$
	DECLARE
		fee_type TEXT;
		fee_val NUMERIC(10,2);
	BEGIN
	FOR fee_type, fee_val IN
		SELECT key, value::NUMERIC
		FROM jsonb_each(fees)
	LOOP
		RAISE NOTICE 'Type: %, Value: %', fee_type, fee_val;
	END LOOP;
END; $$ LANGUAGE plpgsql;

SELECT * from test('{"fee_1":10, "fee_2": 20}');

-- how to deal with JSONB data

SELECT key, value FROM orders, jsonb_each(fees) AS x(key, value)
WHERE order_id = 3;

-- 1. Base Table `orders` - contains multiple columns including fees (JSONB column)
-- 2. Set-Returning Function: jsonb_each()
	-- returns a set of key-value pairs, e.g., SELECT jsonb_each(fees) FROM orders WHERE order_id = 3; |1| (fee_1, 10) ... |2| (fee_2, 20) type record
	-- self-returning functions are functions that generate a result set (multiple rows) for each row of input, i.e., jsonb_each() generates one row for each key-value pair
	-- in the fees JSONB object
	-- this effectively explodes the JSONB object into multiple rows, where each key-value pair from fees becomes its own row in the result set

-- 3. Cross Join (implicit)

SELECT * FROM orders;

-- BEGIN;
-- UPDATE orders
-- SET fees = '{"fee":30}'
-- WHERE order_id = 2;
-- ROLLBACK;

SELECT fee_type, fee_amount::NUMERIC FROM orders, jsonb_each(fees) AS x(fee_type, fee_amount);
-- cross join
-- x is the alias for the result set generated by jsonb_each(fees)
-- essentially x(fee_type, fee_amount) references the result set

